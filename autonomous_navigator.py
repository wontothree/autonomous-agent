class AutonomousNavigator:
    def mission_planner(
            self, 
            air_sensor_pollution_data, 
            robot_sensor_pollution_data, 
            current_node_index,
            map_id,
            room_num,
            pollution_threshold=0.05
            ):
        """
        미션 플래너: 오염 감지된 방들을 기반으로 TSP 순서에 따라 task queue 생성

        Parameters:
        - air_sensor_pollution_data: list of float, 각 방의 공기 센서 오염 수치
        - robot_sensor_pollution_data: list of float, 로봇 센서 오염 수치 (현재 사용 안 함)
        - current_node_index: int, 현재 방(room)의 ID
        - map_id: 0, 1, 2, 3

        Return
        ------
        - best_path: List[int], 방문해야 할 방의 순서
        """
        distance_matrices = {
            0: [
                [0.0, 4.0, 0.0, 5.5],
                [5.6, 0.0, 0.0, 9.1],
                [2.1, 7.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0],
            ],
            1: [
                [0.0, 4.6, 4.7, 5.0, 8.0, 0.2, 4.1],
                [4.6, 0.0, 8.1, 9.0, 13.1, 4.7, 7.4],
                [4.7, 8.1, 0.0, 7.1, 11.6, 4.8, 8.8],
                [5.0, 9.0, 7.1, 0.0, 11.6, 5.0, 9.0],
                [8.0, 12.5, 11.6, 11.6, 0.0, 7.8, 7.8],
                [0.2, 4.7, 4.9, 5.0, 7.8, 0.0, 4.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            2: [
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
            3: [
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            ],
        }

        unobserved_potential_regions = []

        # Polluted regions
        observed_polluted_regions = [
            room_id for room_id in range(room_num)
            if air_sensor_pollution_data[room_id] > pollution_threshold
        ]

        if not observed_polluted_regions:
            return []

        distance_matrix = distance_matrices.get(map_id) 
        dock_station_id = len(distance_matrix) - 1  # 마지막 인덱스가 도킹 스테이션

        min_cost = float('inf')
        optimal_visit_order = []

        # Calculate cost for every cases
        for perm in itertools.permutations(observed_polluted_regions):
            total_cost = 0
            last_visited = current_node_index

            for room_id in perm:
                total_cost += distance_matrix[last_visited][room_id]
                last_visited = room_id

            # Add Cost for last_visited to docking station
            total_cost += distance_matrix[last_visited][dock_station_id]

            if total_cost < min_cost:
                min_cost = total_cost
                optimal_visit_order = list(perm)

        return optimal_visit_order
    
    def global_planner(self, start_node_index, end_node_index, map_id):
        """
        Index rules
        - index of region is a index of matrix
        - last index is for docking station
        - (last - 1) index is for start position
        
        reference_waypoint_matrix[i][j] : waypoints from start node i to end node j
        """

        reference_waypoints = {
            0: {
                (0, 1): [(-1, 2), (-1, -2)],
                (0, 3): [(1.4, -3)],
                (1, 0): [(-1, 1.6), (1.2, 2)],
                (1, 3): [(-0.8, 1.6), (0.2, 1.2), (1.4, -3)],
                (2, 0): [(1.2, 2)],
                (2, 1): [(0.2, 1.6), (-0.8, 1.6), (-1, -2)],
            },
            1: {
                (0, 1): [(-0.2, -2.0), (-1.6, -3.4), (-2.77, -3.4), (-2.77, -2.2)],               
                (0, 2): [(-0.2, -2.0), (-1.57, -0.8), (-1.57, 0.8), (-2.4, 2.4)],
                (0, 3): [(-0.2, -2.0), (-0.62, -0.8), (-0.61, 0.8), (0.9, 0.9), (1.0, 2.8)],
                (0, 4): [(-0.2, -2.0), (0.8, -0.8), (3.9, -0.8), (3.9, 2.2)],
                (0, 5): [(-0.2, -2.0), (0, -2)],
                (0, 6): [(-0.2, -2.0), (0.8, -3.6), (2.8, -4.2)],

                (1, 0): [(-2.77, -2.2), (-2.77, -3.4), (-1.6, -3.4), (-0.2, -2.0)],
                (1, 2): [(-2.77, -2.2), (-2.77, -3.4), (-1.6, -3.4), (-1.57, -0.8), (-1.57, 0.8), (-2.4, 2.4)],
                (1, 3): [(-2.77, -2.2), (-2.77, -3.4), (-1.6, -3.4), (-0.62, -0.8), (-0.61, 0.8), (0.9, 0.9), (1.0, 2.8)],
                (1, 4): [(-2.77, -2.2), (-2.77, -3.4), (-1.6, -3.4), (0.8, -0.8), (3.9, -0.8), (3.9, 2.2)],
                (1, 5): [(-2.77, -2.2), (-2.77, -3.4), (-1.6, -3.4), (0, -2)],
                (1, 6): [(-2.77, -2.2), (-2.77, -3.4), (-1.6, -3.4), (0.8, -3.6), (2.8, -4.2)],
                            
                (2, 0): [(-2.4, 2.4), (-1.57, 0.8), (-1.57, -0.8), (-0.2, -2.0)],			
                (2, 1): [(-2.4, 2.4), (-1.57, 0.8), (-1.57, -0.8), (-1.6, -3.4), (-2.77, -3.4), (-2.77, -2.2)],
                (2, 3): [(-2.4, 2.4), (-1.57, 0.8), (-1.57, -0.8), (-0.62, -0.8), (-0.61, 0.8), (0.9, 0.9), (1.0, 2.8)],
                (2, 4): [(-2.4, 2.4), (-1.57, 0.8), (-1.57, -0.8), (3.9, -0.8), (3.9, 2.2)],
                (2, 5): [(-2.4, 2.4), (-1.57, 0.8), (-1.57, -0.8), (0, -2)],
                (2, 6): [(-2.4, 2.4), (-1.57, 0.8), (-1.57, -0.8), (0.8, -3.6), (2.8, -4.2)],			
                    
                (3, 0): [(1.0, 2.8), (0.9, 0.9), (-0.61, 0.8), (-0.62, -0.8), (-0.2, -2.0)],	
                (3, 1): [(1.0, 2.8), (0.9, 0.9), (-0.61, 0.8), (-0.62, -0.8), (-1.6, -3.4), (-2.77, -3.4), (-2.77, -2.2)],
                (3, 2): [(1.0, 2.8), (0.9, 0.9), (-0.61, 0.8), (-0.62, -0.8), (-1.57, -0.8), (-1.57, 0.8), (-2.4, 2.4)],
                (3, 4): [(1.0, 2.8), (0.9, 0.9), (-0.61, 0.8), (-0.62, -0.8), (3.9, -0.8), (3.9, 2.2)],
                (3, 5): [(1.0, 2.8), (0.9, 0.9), (-0.61, 0.8), (-0.62, -0.8), (0, -2)],
                (3, 6): [(1.0, 2.8), (0.9, 0.9), (-0.61, 0.8), (-0.62, -0.8), (0.8, -3.6), (2.8, -4.2)],

                (4, 0): [(3.9, 2.2), (3.9, -0.8), (0.8, -0.8), (-0.2, -2.0)],
                (4, 1): [(3.9, 2.2), (3.9, -0.8), (0.8, -0.8), (-1.6, -3.4), (-2.77, -3.4), (-2.77, -2.2)],
                (4, 2): [(3.9, 2.2), (3.9, -0.8), (-1.57, -0.8), (-1.57, 0.8), (-2.4, 2.4)],
                (4, 3): [(3.9, 2.2), (3.9, -0.8), (-0.62, -0.8), (-0.61, 0.8), (0.9, 0.9), (1.0, 2.8)],
                (4, 5): [(3.9, 2.2), (3.9, -0.8), (0.8, -0.8), (0, -2)],
                (4, 6): [(3.9, 2.2), (3.9, -0.8), (2.6, -0.8), (2.6, -4.2)],

                (5, 0): [(0, -2), (-0.2, -2.0)],
                (5, 1): [(0, -2), (-1.6, -3.4), (-2.77, -3.4), (-2.77, -2.2)],               
                (5, 2): [(0, -2), (-1.57, -0.8), (-1.57, 0.8), (-2.4, 2.4)],
                (5, 3): [(0, -2), (-0.62, -0.8), (-0.61, 0.8), (0.9, 0.9), (1.0, 2.8)],
                (5, 4): [(0, -2), (0.8, -0.8), (3.9, -0.8), (3.9, 2.2)],
                (5, 6): [(0, -2), (0.8, -3.6), (2.8, -4.2)],
            },
            2: {
                # (0, 1): [(3.8, 1.8), (-1.0, 1.6), (-2.4, 2.4), (-2.4, 4.8)],               
                # (0, 2): [(3.8, 1.8), (-4.2, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (0, 3): [(3.8, 1.8), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (0, 4): [(3.8, 1.8), (-2.8, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (0, 5): [(3.8, 1.8), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (0, 6): [(3.8, 1.8), (0.2, -1.6), (0.8, -5.0)],
                # (0, 7): [(3.8, 1.8), (5.6, 4.6), (6.0, 5.2)],
                # (0, 8): [(3.8, 1.8), (3, 3)],
                # (0, 9): [(3.8, 1.8), (-0.2, 6.4)],

                # (1, 0): [(-2.4, 4.8), (-2.4, 2.4), (-1.0, 1.6), (3.8, 1.8)],
                # (1, 2): [(-2.4, 4.8), (-2.4, 2.4), (-4.2, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (1, 3): [(-2.4, 4.8), (-2.4, 2.4), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (1, 4): [(-2.4, 4.8), (-2.4, 2.4), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (1, 5): [(-2.4, 4.8), (-2.4, 2.4), (-0.4, -1.0), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (1, 6): [(-2.4, 4.8), (-2.4, 2.4), (-0.4, -1.0), (0.2, -1.6), (0.8, -5.0)],
                # (1, 7): [(-2.4, 4.8), (-2.4, 2.4), (-1.0, 1.6), (5.6, 4.6), (6.0, 5.2)],
                # (1, 8): [(-2.4, 4.8), (-2.4, 2.4), (-1.0, 1.6), (3, 3)],
                # (1, 9): [(-2.4, 4.8), (-2.4, 2.4), (-1.0, 1.6), (-0.2, 1.0), (-0.2, 6.4)],
                            
                # (2, 0): [(-5.8, 1.8), (-5.8, -1.0), (-4.2, -1.0), (3.8, 1.8)],			
                # (2, 1): [(-5.8, 1.8), (-5.8, -1.0), (-4.2, -1.0), (-2.4, 2.4), (-2.4, 4.8)],
                # (2, 3): [(-5.8, 1.8), (-5.8, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (2, 4): [(-5.8, 1.8), (-5.8, -1.0), (-4.2, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (2, 5): [(-5.8, 1.8), (-5.8, -1.0), (-0.4, -1.0), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (2, 6): [(-5.8, 1.8), (-5.8, -1.0), (-0.4, -1.0), (0.2, -1.6), (0.8, -5.0)],
                # (2, 7): [(-5.8, 1.8), (-5.8, -1.0), (-4.2, -1.0), (5.6, 4.6), (6.0, 5.2)],
                # (2, 8): [(-5.8, 1.8), (-5.8, -1.0), (-4.2, -1.0), (3, 3)],
                # (2, 9): [(-5.8, 1.8), (-5.8, -1.0), (-4.2, -1.0), (-0.2, 1.0), (-0.2, 6.4)],		
                    
                # (3, 0): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (3.8, 1.8)],	
                # (3, 1): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (-2.4, 2.4), (-2.4, 4.8)],
                # (3, 2): [(-5.2, -5.0), (-4.8, -1.6), (-5.8, -1.0), (-5.8, 1.8)],
                # (3, 4): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (3, 5): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (-0.4, -1.0), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (3, 6): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (-0.4, -1.0), (0.2, -1.6), (0.8, -5.0)],
                # (3, 7): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (5.6, 4.6), (6.0, 5.2)],
                # (3, 8): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (3, 3)],
                # (3, 9): [(-5.2, -5.0), (-4.8, -1.6), (-4.2, -1.0), (-0.2, 1.0), (-0.2, 6.4)],

                # (4, 0): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.8, -1.0), (3.8, 1.8)],
                # (4, 1): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.4, 2.4), (-2.4, 4.8)],
                # (4, 2): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-4.2, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (4, 3): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (4, 5): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.8, -1.0), (-0.4, -1.0), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (4, 6): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.8, -1.0), (-0.4, -1.0), (0.2, -1.6), (0.8, -5.0)],
                # (4, 7): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.8, -1.0), (5.6, 4.6), (6.0, 5.2)],
                # (4, 8): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.8, -1.0), (3, 3)],
                # (4, 9): [(-1.8, -3.4), (-3.4, -2.2), (-3.4, -1.6), (-2.8, -1.0), (-0.2, 1.0), (-0.2, 6.4)],

                # (5, 0): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (3.8, 1.8)],
                # (5, 1): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (-2.4, 2.4), (-2.4, 4.8)],           
                # (5, 2): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (-0.4, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (5, 3): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (-0.4, -1.0), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (5, 4): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (-0.4, -1.0), (-2.8, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (5, 6): [(-1.2, -6.0), (0.2, -6.0), (0.8, -5.0)],
                # (5, 7): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (5.6, 4.6), (6.0, 5.2)],
                # (5, 8): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (3, 3)],
                # (5, 9): [(-1.2, -6.0), (0.2, -6.0), (0.8, -4.4), (0.2, -1.6), (-0.2, 6.4)],

                # (6, 0): [(0.8, -5.0), (0.2, -1.6), (3.8, 1.8)],
                # (6, 1): [(0.8, -5.0), (0.2, -1.6), (-2.4, 2.4), (-2.4, 4.8)],              
                # (6, 2): [(0.8, -5.0), (0.2, -1.6), (-0.4, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (6, 3): [(0.8, -5.0), (0.2, -1.6), (-0.4, -1.0), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (6, 4): [(0.8, -5.0), (0.2, -1.6), (-0.4, -1.0), (-2.8, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (6, 5): [(0.8, -5.0), (0.2, -6.0), (-1.2, -6.0)],
                # (6, 7): [(0.8, -5.0), (0.2, -1.6), (5.6, 4.6), (6.0, 5.2)],
                # (6, 8): [(0.8, -5.0), (0.2, -1.6), (3, 3)],
                # (6, 9): [(0.8, -5.0), (0.2, -1.6), (-0.2, 6.4)],

                # (7, 0): [(6.0, 5.2), (5.6, 4.6), (3.8, 1.8)],
                # (7, 1): [(6.0, 5.2), (5.6, 4.6), (-1.0, 1.6), (-2.4, 2.4), (-2.4, 4.8)],                
                # (7, 2): [(6.0, 5.2), (5.6, 4.6), (-4.2, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (7, 3): [(6.0, 5.2), (5.6, 4.6), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (7, 4): [(6.0, 5.2), (5.6, 4.6), (-2.8, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (7, 5): [(6.0, 5.2), (5.6, 4.6), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (7, 6): [(6.0, 5.2), (5.6, 4.6), (0.2, -1.6), (0.8, -5.0)],
                # (7, 8): [(6.0, 5.2), (5.6, 4.6), (3, 3)],
                # (7, 9): [(6.0, 5.2), (5.6, 4.6), (-0.2, 6.4)],

                # (8, 0): [(3, 3), (3.8, 1.8)],
                # (8, 1): [(3, 3), (-1.0, 1.6), (-2.4, 2.4), (-2.4, 4.8)],               
                # (8, 2): [(3, 3), (-4.2, -1.0), (-5.8, -1.0), (-5.8, 1.8)],
                # (8, 3): [(3, 3), (-4.2, -1.0), (-4.8, -1.6), (-5.2, -5.0)],
                # (8, 4): [(3, 3), (-2.8, -1.0), (-3.4, -1.6), (-3.4, -2.2), (-1.8, -3.4)],
                # (8, 5): [(3, 3), (0.2, -1.6), (0.8, -4.4), (0.2, -6.0), (-1.2, -6.0)],
                # (8, 6): [(3, 3), (0.2, -1.6), (0.8, -5.0)],
                # (8, 7): [(3, 3), (5.6, 4.6), (6.0, 5.2)],
                # (8, 9): [(3, 3), (-0.2, 6.4)],

                (0, 0): [(-40, 0)],
                (0, 1): [(-40, 0)],
                (0, 2): [(-40, 0)],
                (0, 3): [(-40, 0)],
                (0, 4): [(-40, 0)],
                (0, 5): [(-40, 0)],
                (0, 6): [(-40, 0)],
                (0, 7): [(-40, 0)],
                (0, 8): [(-40, 0)],
                (0, 9): [(-40, 0)],
                (0, 10): [(-40, 0)],
                (0, 11): [(-40, 0)],
                (0, 12): [(-40, 0)],
                (0, 13): [(-40, 0)],
                (0, 14): [(-40, 0)],

                (1, 0): [(-40, 0)],
                (1, 1): [(-40, 0)],
                (1, 2): [(-40, 0)],
                (1, 3): [(-40, 0)],
                (1, 4): [(-40, 0)],
                (1, 5): [(-40, 0)],
                (1, 6): [(-40, 0)],
                (1, 7): [(-40, 0)],
                (1, 8): [(-40, 0)],
                (1, 9): [(-40, 0)],

                (2, 0): [(-40, 0)],
                (2, 1): [(-40, 0)],
                (2, 2): [(-40, 0)],
                (2, 3): [(-40, 0)],
                (2, 4): [(-40, 0)],
                (2, 5): [(-40, 0)],
                (2, 6): [(-40, 0)],
                (2, 7): [(-40, 0)],
                (2, 8): [(-40, 0)],
                (2, 9): [(-40, 0)],

                (3, 0): [(-40, 0)],
                (3, 1): [(-40, 0)],
                (3, 2): [(-40, 0)],
                (3, 3): [(-40, 0)],
                (3, 4): [(-40, 0)],
                (3, 5): [(-40, 0)],
                (3, 6): [(-40, 0)],
                (3, 7): [(-40, 0)],
                (3, 8): [(-40, 0)],
                (3, 9): [(-40, 0)],

                (4, 0): [(-40, 0)],
                (4, 1): [(-40, 0)],
                (4, 2): [(-40, 0)],
                (4, 3): [(-40, 0)],
                (4, 4): [(-40, 0)],
                (4, 5): [(-40, 0)],
                (4, 6): [(-40, 0)],
                (4, 7): [(-40, 0)],
                (4, 8): [(-40, 0)],
                (4, 9): [(-40, 0)],

                (5, 0): [(-40, 0)],
                (5, 1): [(-40, 0)],
                (5, 2): [(-40, 0)],
                (5, 3): [(-40, 0)],
                (5, 4): [(-40, 0)],
                (5, 5): [(-40, 0)],
                (5, 6): [(-40, 0)],
                (5, 7): [(-40, 0)],
                (5, 8): [(-40, 0)],
                (5, 9): [(-40, 0)],

                (6, 0): [(-40, 0)],
                (6, 1): [(-40, 0)],
                (6, 2): [(-40, 0)],
                (6, 3): [(-40, 0)],
                (6, 4): [(-40, 0)],
                (6, 5): [(-40, 0)],
                (6, 6): [(-40, 0)],
                (6, 7): [(-40, 0)],
                (6, 8): [(-40, 0)],
                (6, 9): [(-40, 0)],

                (7, 0): [(-40, 0)],
                (7, 1): [(-40, 0)],
                (7, 2): [(-40, 0)],
                (7, 3): [(-40, 0)],
                (7, 4): [(-40, 0)],
                (7, 5): [(-40, 0)],
                (7, 6): [(-40, 0)],
                (7, 7): [(-40, 0)],
                (7, 8): [(-40, 0)],
                (7, 9): [(-40, 0)],

                (8, 0): [(-40, 0)],
                (8, 1): [(-40, 0)],
                (8, 2): [(-40, 0)],
                (8, 3): [(-40, 0)],
                (8, 4): [(-40, 0)],
                (8, 5): [(-40, 0)],
                (8, 6): [(-40, 0)],
                (8, 7): [(-40, 0)],
                (8, 8): [(-40, 0)],
                (8, 9): [(-40, 0)],
            },
            3: {
                (0, 0): [(0, 0)],
                (0, 1): [(0, 0)],
                (0, 2): [(0, 0)],
                (0, 3): [(0, 0)],
                (0, 4): [(0, 0)],
                (0, 5): [(0, 0)],
                (0, 6): [(0, 0)],
                (0, 7): [(0, 0)],
                (0, 8): [(0, 0)],
                (0, 9): [(0, 0)],
                (0, 10): [(0, 0)],
                (0, 11): [(0, 0)],
                (0, 12): [(0, 0)],
                (0, 13): [(0, 0)],
                (0, 14): [(0, 0)],

                (1, 0): [(0, 0)],
                (1, 1): [(0, 0)],
                (1, 2): [(0, 0)],
                (1, 3): [(0, 0)],
                (1, 4): [(0, 0)],
                (1, 5): [(0, 0)],
                (1, 6): [(0, 0)],
                (1, 7): [(0, 0)],
                (1, 8): [(0, 0)],
                (1, 9): [(0, 0)],
                (1, 10): [(0, 0)],
                (1, 11): [(0, 0)],
                (1, 12): [(0, 0)],
                (1, 13): [(0, 0)],
                (1, 14): [(0, 0)],

                (2, 0): [(0, 0)],
                (2, 1): [(0, 0)],
                (2, 2): [(0, 0)],
                (2, 3): [(0, 0)],
                (2, 4): [(0, 0)],
                (2, 5): [(0, 0)],
                (2, 6): [(0, 0)],
                (2, 7): [(0, 0)],
                (2, 8): [(0, 0)],
                (2, 9): [(0, 0)],
                (2, 10): [(0, 0)],
                (2, 11): [(0, 0)],
                (2, 12): [(0, 0)],
                (2, 13): [(0, 0)],
                (2, 14): [(0, 0)],

                (3, 0): [(0, 0)],
                (3, 1): [(0, 0)],
                (3, 2): [(0, 0)],
                (3, 3): [(0, 0)],
                (3, 4): [(0, 0)],
                (3, 5): [(0, 0)],
                (3, 6): [(0, 0)],
                (3, 7): [(0, 0)],
                (3, 8): [(0, 0)],
                (3, 9): [(0, 0)],
                (3, 10): [(0, 0)],
                (3, 11): [(0, 0)],
                (3, 12): [(0, 0)],
                (3, 13): [(0, 0)],
                (3, 14): [(0, 0)],

                (4, 0): [(0, 0)],
                (4, 1): [(0, 0)],
                (4, 2): [(0, 0)],
                (4, 3): [(0, 0)],
                (4, 4): [(0, 0)],
                (4, 5): [(0, 0)],
                (4, 6): [(0, 0)],
                (4, 7): [(0, 0)],
                (4, 8): [(0, 0)],
                (4, 9): [(0, 0)],
                (4, 10): [(0, 0)],
                (4, 11): [(0, 0)],
                (4, 12): [(0, 0)],
                (4, 13): [(0, 0)],
                (4, 14): [(0, 0)],

                (5, 0): [(0, 0)],
                (5, 1): [(0, 0)],
                (5, 2): [(0, 0)],
                (5, 3): [(0, 0)],
                (5, 4): [(0, 0)],
                (5, 5): [(0, 0)],
                (5, 6): [(0, 0)],
                (5, 7): [(0, 0)],
                (5, 8): [(0, 0)],
                (5, 9): [(0, 0)],
                (5, 10): [(0, 0)],
                (5, 11): [(0, 0)],
                (5, 12): [(0, 0)],
                (5, 13): [(0, 0)],
                (5, 14): [(0, 0)],

                (6, 0): [(0, 0)],
                (6, 1): [(0, 0)],
                (6, 2): [(0, 0)],
                (6, 3): [(0, 0)],
                (6, 4): [(0, 0)],
                (6, 5): [(0, 0)],
                (6, 6): [(0, 0)],
                (6, 7): [(0, 0)],
                (6, 8): [(0, 0)],
                (6, 9): [(0, 0)],
                (6, 10): [(0, 0)],
                (6, 11): [(0, 0)],
                (6, 12): [(0, 0)],
                (6, 13): [(0, 0)],
                (6, 14): [(0, 0)],

                (7, 0): [(0, 0)],
                (7, 1): [(0, 0)],
                (7, 2): [(0, 0)],
                (7, 3): [(0, 0)],
                (7, 4): [(0, 0)],
                (7, 5): [(0, 0)],
                (7, 6): [(0, 0)],
                (7, 7): [(0, 0)],
                (7, 8): [(0, 0)],
                (7, 9): [(0, 0)],
                (7, 10): [(0, 0)],
                (7, 11): [(0, 0)],
                (7, 12): [(0, 0)],
                (7, 13): [(0, 0)],
                (7, 14): [(0, 0)],

                (8, 0): [(0, 0)],
                (8, 1): [(0, 0)],
                (8, 2): [(0, 0)],
                (8, 3): [(0, 0)],
                (8, 4): [(0, 0)],
                (8, 5): [(0, 0)],
                (8, 6): [(0, 0)],
                (8, 7): [(0, 0)],
                (8, 8): [(0, 0)],
                (8, 9): [(0, 0)],
                (8, 10): [(0, 0)],
                (8, 11): [(0, 0)],
                (8, 12): [(0, 0)],
                (8, 13): [(0, 0)],
                (8, 14): [(0, 0)],

                (9, 0): [(0, 0)],
                (9, 1): [(0, 0)],
                (9, 2): [(0, 0)],
                (9, 3): [(0, 0)],
                (9, 4): [(0, 0)],
                (9, 5): [(0, 0)],
                (9, 6): [(0, 0)],
                (9, 7): [(0, 0)],
                (9, 8): [(0, 0)],
                (9, 9): [(0, 0)],
                (9, 10): [(0, 0)],
                (9, 11): [(0, 0)],
                (9, 12): [(0, 0)],
                (9, 13): [(0, 0)],
                (9, 14): [(0, 0)],

                (10, 0): [(0, 0)],
                (10, 1): [(0, 0)],
                (10, 2): [(0, 0)],
                (10, 3): [(0, 0)],
                (10, 4): [(0, 0)],
                (10, 5): [(0, 0)],
                (10, 6): [(0, 0)],
                (10, 7): [(0, 0)],
                (10, 8): [(0, 0)],
                (10, 9): [(0, 0)],
                (10, 10): [(0, 0)],
                (10, 11): [(0, 0)],
                (10, 12): [(0, 0)],
                (10, 13): [(0, 0)],
                (10, 14): [(0, 0)],

                (11, 0): [(0, 0)],
                (11, 1): [(0, 0)],
                (11, 2): [(0, 0)],
                (11, 3): [(0, 0)],
                (11, 4): [(0, 0)],
                (11, 5): [(0, 0)],
                (11, 6): [(0, 0)],
                (11, 7): [(0, 0)],
                (11, 8): [(0, 0)],
                (11, 9): [(0, 0)],
                (11, 10): [(0, 0)],
                (11, 11): [(0, 0)],
                (11, 12): [(0, 0)],
                (11, 13): [(0, 0)],
                (11, 14): [(0, 0)],

                (12, 0): [(0, 0)],
                (12, 1): [(0, 0)],
                (12, 2): [(0, 0)],
                (12, 3): [(0, 0)],
                (12, 4): [(0, 0)],
                (12, 5): [(0, 0)],
                (12, 6): [(0, 0)],
                (12, 7): [(0, 0)],
                (12, 8): [(0, 0)],
                (12, 9): [(0, 0)],
                (12, 10): [(0, 0)],
                (12, 11): [(0, 0)],
                (12, 12): [(0, 0)],
                (12, 13): [(0, 0)],
                (12, 14): [(0, 0)],

                (13, 0): [(0, 0)],
                (13, 1): [(0, 0)],
                (13, 2): [(0, 0)],
                (13, 3): [(0, 0)],
                (13, 4): [(0, 0)],
                (13, 5): [(0, 0)],
                (13, 6): [(0, 0)],
                (13, 7): [(0, 0)],
                (13, 8): [(0, 0)],
                (13, 9): [(0, 0)],
                (13, 10): [(0, 0)],
                (13, 11): [(0, 0)],
                (13, 12): [(0, 0)],
                (13, 13): [(0, 0)],
                (13, 14): [(0, 0)],

                (14, 0): [(0, 0)],
                (14, 1): [(0, 0)],
                (14, 2): [(0, 0)],
                (14, 3): [(0, 0)],
                (14, 4): [(0, 0)],
                (14, 5): [(0, 0)],
                (14, 6): [(0, 0)],
                (14, 7): [(0, 0)],
                (14, 8): [(0, 0)],
                (14, 9): [(0, 0)],
                (14, 10): [(0, 0)],
                (14, 11): [(0, 0)],
                (14, 12): [(0, 0)],
                (14, 13): [(0, 0)],
                (14, 14): [(0, 0)]
            },
        }

        map_reference_waypoints = reference_waypoints[map_id]
        
        # Check validity of map_id
        if map_id not in reference_waypoints:
            return None

        # Check validity of node indexes
        if (start_node_index, end_node_index) not in map_reference_waypoints:
            return None

        return map_reference_waypoints[(start_node_index, end_node_index)]

    def controller(self, current_robot_pose, target_position, 
                linear_gain=1.0, angular_gain=2.0, 
                max_linear=1, max_angular=1.0,
                angle_threshold=0.2):
        """
        목표 방향을 먼저 향하도록 하고, 방향이 맞으면 직진.
        """
        x, y, theta = current_robot_pose
        target_x, target_y = target_position

        dx = target_x - x
        dy = target_y - y
        distance = math.hypot(dx, dy)
        target_angle = math.atan2(dy, dx)

        # 방향 오차
        angle_error = target_angle - theta
        angle_error = math.atan2(math.sin(angle_error), math.cos(angle_error))  # -pi ~ pi

        # 방향 우선 제어
        if abs(angle_error) > angle_threshold:
            linear_velocity = 0.0  # 먼저 회전
            angular_velocity = max(-max_angular, min(max_angular, angular_gain * angle_error))
        else:
            linear_velocity = max(-max_linear, min(max_linear, linear_gain * distance))
            angular_velocity = max(-max_angular, min(max_angular, angular_gain * angle_error))

        return linear_velocity, angular_velocity

    def localizer(self, delta_distance, delta_yaw, scan_ranges, occupancy_grid_map, distance_map):
        """
        Localization by Particle Filter
        """
        # Basic
        # x, y, yaw = self.current_robot_pose

        # new_x = x + delta_distance * math.cos(yaw)
        # new_y = y + delta_distance * math.sin(yaw)
        # new_yaw = (yaw + delta_yaw + math.pi) % (2 * math.pi) - math.pi
        # self.current_robot_pose = (new_x, new_y, new_yaw)

        # Localization by Particle Filter
        self.particle_filter.update_particles_by_motion_model(delta_distance, delta_yaw)
        self.particle_filter.update_weights_by_measurement_model(
            scan_ranges=scan_ranges,
            occupancy_grid_map=occupancy_grid_map,
            distance_map=distance_map,
            map_origin=self.map_origin,
            map_resolution=self.resolution
        )
        estimated_x, estimated_y, estimated_yaw = self.particle_filter.estimate_robot_pose()
        self.current_robot_pose = (estimated_x, estimated_y, estimated_yaw)
        self.particle_filter.resample_particles()

        # Print error
        if True:
            if (
                self.true_robot_pose is None 
                or self.current_robot_pose is None
                or None in self.true_robot_pose
                or None in self.current_robot_pose
            ):
                return

            dx = self.current_robot_pose[0] - self.true_robot_pose[0]
            dy = self.current_robot_pose[1] - self.true_robot_pose[1]
            self.distance_error = math.hypot(dx, dy)
            if self.distance_error > self.max_localization_error: self.max_localization_error = self.distance_error
            # self.log(f"PF Error: {distance_error:.3f}, MAX Error: {self.max_localization_error}")

    # Main Logic
    def finite_state_machine(self,
            air_sensor_pollution_data,
            robot_sensor_pollution_data,
            current_time,
            pollution_end_time,
            current_robot_pose, 
            current_fsm_state,
            map_id,
            room_num,
            pollution_threshold=0.05 
            ):
        """
        current_fsm_state -> next_fsm_state, action
        """
        # Define states of finite state machine
        FSM_READY = "READY"
        FSM_CLEANING = "CLEANING"
        FSM_NAVIGATING = "NAVIGATING"
        FSM_RETURNING = "RETURNING"

        # Indexes of initial node and docking station node by map
        initial_node_index = room_num
        docking_station_node_index = room_num + 1

        def calculate_distance_to_target_position(current_position, target_position):
            """
            Euclidean distance
            """
            dx = target_position[0] - current_position[0]
            dy = target_position[1] - current_position[1]
            distance = math.hypot(dx, dy)
            return distance

        def is_target_reached(current_position, target_position, threshold=0.05):
            """
            Decide if robot reached in target position by threshold
            """
            return calculate_distance_to_target_position(current_position, target_position) < threshold
        
        def are_no_polluted_rooms(air_sensor_pollution_data):
            """
            Decide if there are polluted rooms
            """
            return all(pollution <= 0 for pollution in air_sensor_pollution_data) # True: there are no polluted rooms

        current_robot_position = current_robot_pose[0], current_robot_pose[1]

        # ---------------------------------------------------------------------------- #
        # [State] READY (start state) ------------------------------------------------ #
        # ---------------------------------------------------------------------------- #
        if current_fsm_state == FSM_READY:
            # Mission planning
            optimal_visit_order = self.mission_planner(
                air_sensor_pollution_data, 
                robot_sensor_pollution_data, 
                current_node_index=initial_node_index,
                map_id=map_id,
                room_num=room_num
                )

            # State transition
            # READY -> NAVIGATING
            if optimal_visit_order: # 목표 구역이 있음
                next_fsm_state = FSM_NAVIGATING
                self.optimal_next_node_index = optimal_visit_order[0]
                self.waypoints = self.global_planner(start_node_index=initial_node_index, end_node_index=self.optimal_next_node_index, map_id=map_id)
                self.current_waypoint_index = 0
                self.tmp_target_position = self.waypoints[0]
            
            # READY -> READY
            else:
                next_fsm_state = FSM_READY

            action = (0, 0, 0) # Stop

        # ---------------------------------------------------------------------------- #
        # [State] Navigating --------------------------------------------------------- #
        # ---------------------------------------------------------------------------- #
        elif current_fsm_state == FSM_NAVIGATING:
            # State transition
            # NAVIGATING -> CLEANING
            if is_target_reached(current_robot_position, self.waypoints[-1]): # 목표 구역에 도달함
                next_fsm_state = FSM_CLEANING
                self.current_waypoint_index = 0
                self.current_node_index = self.optimal_next_node_index
            
            # NAVIGATING -> NAVIGATING
            else:
                next_fsm_state = FSM_NAVIGATING

            # set next tempt target point 이 순서를 바꾸면 왜 문제가 생길까?
            if is_target_reached(current_robot_position, self.tmp_target_position) and self.current_waypoint_index < len(self.waypoints) - 1:
                self.current_waypoint_index += 1
                self.tmp_target_position = self.waypoints[self.current_waypoint_index]

            linear_velocity, angular_velocity = self.controller(current_robot_pose, self.tmp_target_position)
            action = (0, linear_velocity, angular_velocity)

        # ---------------------------------------------------------------------------- #
        # [State] CLEANING ----------------------------------------------------------- #
        # ---------------------------------------------------------------------------- #
        elif current_fsm_state == FSM_CLEANING:
            # Mission planning
            optimal_visit_order = self.mission_planner(
                air_sensor_pollution_data, 
                robot_sensor_pollution_data, 
                current_node_index=self.current_node_index,
                map_id=map_id,
                room_num=room_num
                )          

            # State transition
            # CLEANING -> RETURNING
            if are_no_polluted_rooms(air_sensor_pollution_data) and current_time >= pollution_end_time:     # 오염 구역이 없음
                next_fsm_state = FSM_RETURNING

                self.current_waypoint_index = 0
                self.waypoints = self.global_planner(start_node_index=self.current_node_index, end_node_index=docking_station_node_index, map_id=map_id)
                self.tmp_target_position = self.waypoints[0]

            # tmp
            elif current_time >= pollution_end_time and map_id != 0:
                next_fsm_state = FSM_RETURNING

                self.current_waypoint_index = 0
                self.waypoints = self.global_planner(start_node_index=self.current_node_index, end_node_index=docking_station_node_index, map_id=map_id)
                self.tmp_target_position = self.waypoints[0]

            # CLEANING -> NAVIGATING
            elif air_sensor_pollution_data[self.optimal_next_node_index] < pollution_threshold and optimal_visit_order:       # 청정 완료함
                next_fsm_state = FSM_NAVIGATING

                # 꼭 이때 해야 할까?
                self.optimal_next_node_index = optimal_visit_order[0]
                self.waypoints = self.global_planner(start_node_index=self.current_node_index, end_node_index=self.optimal_next_node_index, map_id=map_id)
                self.current_waypoint_index = 0
                self.tmp_target_position = self.waypoints[0]  

            # CLEANING -> CLEANING
            else:
                next_fsm_state = FSM_CLEANING
            
            action = (1, 0, 0) # Stop and clean

        # ---------------------------------------------------------------------------- #
        # [State] RETURNING (end state) ---------------------------------------------- #
        # ---------------------------------------------------------------------------- #
        elif current_fsm_state == FSM_RETURNING:
            next_fsm_state = FSM_RETURNING
            
            linear_velocity, angular_velocity = self.controller(current_robot_pose, self.tmp_target_position)
            action = (0, linear_velocity, angular_velocity)

            if is_target_reached(current_robot_position, self.tmp_target_position) and self.current_waypoint_index < len(self.waypoints) - 1:
                self.current_waypoint_index += 1
                self.tmp_target_position = self.waypoints[self.current_waypoint_index]

        # log
        if current_fsm_state == FSM_NAVIGATING:
            self.log(f"[{current_time:.1f}] [NAVIGATING] {self.current_node_index} -> {self.optimal_next_node_index} | PF Error: {self.distance_error:.3f}")
        elif current_fsm_state == FSM_CLEANING:
            self.log(f"[{current_time:.1f}] [CLEANING] {self.current_node_index}: {air_sensor_pollution_data[self.current_node_index]:.3f} | PF Error: {self.distance_error:.3f}")
        else:
            self.log(f"[{current_time:.1f}] [{current_fsm_state}] | PF Error: {self.distance_error:.3f}")


        return next_fsm_state, action